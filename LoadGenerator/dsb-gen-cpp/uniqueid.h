/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef uniqueid_H
#define uniqueid_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "uniqueid_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class uniqueidIf {
 public:
  virtual ~uniqueidIf() {}
  virtual void compute_unique_id(const int32_t id) = 0;
};

class uniqueidIfFactory {
 public:
  typedef uniqueidIf Handler;

  virtual ~uniqueidIfFactory() {}

  virtual uniqueidIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(uniqueidIf* /* handler */) = 0;
};

class uniqueidIfSingletonFactory : virtual public uniqueidIfFactory {
 public:
  uniqueidIfSingletonFactory(const ::std::shared_ptr<uniqueidIf>& iface) : iface_(iface) {}
  virtual ~uniqueidIfSingletonFactory() {}

  virtual uniqueidIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(uniqueidIf* /* handler */) {}

 protected:
  ::std::shared_ptr<uniqueidIf> iface_;
};

class uniqueidNull : virtual public uniqueidIf {
 public:
  virtual ~uniqueidNull() {}
  void compute_unique_id(const int32_t /* id */) {
    return;
  }
};

typedef struct _uniqueid_compute_unique_id_args__isset {
  _uniqueid_compute_unique_id_args__isset() : id(false) {}
  bool id :1;
} _uniqueid_compute_unique_id_args__isset;

class uniqueid_compute_unique_id_args {
 public:

  uniqueid_compute_unique_id_args(const uniqueid_compute_unique_id_args&);
  uniqueid_compute_unique_id_args& operator=(const uniqueid_compute_unique_id_args&);
  uniqueid_compute_unique_id_args() : id(0) {
  }

  virtual ~uniqueid_compute_unique_id_args() noexcept;
  int32_t id;

  _uniqueid_compute_unique_id_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const uniqueid_compute_unique_id_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const uniqueid_compute_unique_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const uniqueid_compute_unique_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class uniqueid_compute_unique_id_pargs {
 public:


  virtual ~uniqueid_compute_unique_id_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class uniqueid_compute_unique_id_result {
 public:

  uniqueid_compute_unique_id_result(const uniqueid_compute_unique_id_result&);
  uniqueid_compute_unique_id_result& operator=(const uniqueid_compute_unique_id_result&);
  uniqueid_compute_unique_id_result() {
  }

  virtual ~uniqueid_compute_unique_id_result() noexcept;

  bool operator == (const uniqueid_compute_unique_id_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const uniqueid_compute_unique_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const uniqueid_compute_unique_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class uniqueid_compute_unique_id_presult {
 public:


  virtual ~uniqueid_compute_unique_id_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class uniqueidClient : virtual public uniqueidIf {
 public:
  uniqueidClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  uniqueidClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void compute_unique_id(const int32_t id);
  void send_compute_unique_id(const int32_t id);
  void recv_compute_unique_id();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class uniqueidProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<uniqueidIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (uniqueidProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_compute_unique_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  uniqueidProcessor(::std::shared_ptr<uniqueidIf> iface) :
    iface_(iface) {
    processMap_["compute_unique_id"] = &uniqueidProcessor::process_compute_unique_id;
  }

  virtual ~uniqueidProcessor() {}
};

class uniqueidProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  uniqueidProcessorFactory(const ::std::shared_ptr< uniqueidIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< uniqueidIfFactory > handlerFactory_;
};

class uniqueidMultiface : virtual public uniqueidIf {
 public:
  uniqueidMultiface(std::vector<std::shared_ptr<uniqueidIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~uniqueidMultiface() {}
 protected:
  std::vector<std::shared_ptr<uniqueidIf> > ifaces_;
  uniqueidMultiface() {}
  void add(::std::shared_ptr<uniqueidIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void compute_unique_id(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compute_unique_id(id);
    }
    ifaces_[i]->compute_unique_id(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class uniqueidConcurrentClient : virtual public uniqueidIf {
 public:
  uniqueidConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  uniqueidConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void compute_unique_id(const int32_t id);
  int32_t send_compute_unique_id(const int32_t id);
  void recv_compute_unique_id(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
