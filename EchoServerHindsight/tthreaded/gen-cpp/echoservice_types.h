/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef echoservice_TYPES_H
#define echoservice_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace echoservice {

class TraceContext;

typedef struct _TraceContext__isset {
  _TraceContext__isset() : req_id(false), baggage(false) {}
  bool req_id :1;
  bool baggage :1;
} _TraceContext__isset;

class TraceContext : public virtual ::apache::thrift::TBase {
 public:

  TraceContext(const TraceContext&);
  TraceContext& operator=(const TraceContext&);
  TraceContext() noexcept
               : req_id(0),
                 baggage() {
  }

  virtual ~TraceContext() noexcept;
  int64_t req_id;
  std::string baggage;

  _TraceContext__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_baggage(const std::string& val);

  bool operator == (const TraceContext & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(baggage == rhs.baggage))
      return false;
    return true;
  }
  bool operator != (const TraceContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TraceContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TraceContext &a, TraceContext &b);

std::ostream& operator<<(std::ostream& out, const TraceContext& obj);

} // namespace

#endif
