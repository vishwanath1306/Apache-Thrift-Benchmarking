/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EchoService_H
#define EchoService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "echoservice_types.h"

namespace echoservice {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EchoServiceIf {
 public:
  virtual ~EchoServiceIf() {}
  virtual void call(const TraceContext& req, const std::string& message) = 0;
};

class EchoServiceIfFactory {
 public:
  typedef EchoServiceIf Handler;

  virtual ~EchoServiceIfFactory() {}

  virtual EchoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EchoServiceIf* /* handler */) = 0;
  };

class EchoServiceIfSingletonFactory : virtual public EchoServiceIfFactory {
 public:
  EchoServiceIfSingletonFactory(const ::std::shared_ptr<EchoServiceIf>& iface) : iface_(iface) {}
  virtual ~EchoServiceIfSingletonFactory() {}

  virtual EchoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(EchoServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<EchoServiceIf> iface_;
};

class EchoServiceNull : virtual public EchoServiceIf {
 public:
  virtual ~EchoServiceNull() {}
  void call(const TraceContext& /* req */, const std::string& /* message */) override {
    return;
  }
};

typedef struct _EchoService_call_args__isset {
  _EchoService_call_args__isset() : req(false), message(false) {}
  bool req :1;
  bool message :1;
} _EchoService_call_args__isset;

class EchoService_call_args {
 public:

  EchoService_call_args(const EchoService_call_args&);
  EchoService_call_args& operator=(const EchoService_call_args&);
  EchoService_call_args() noexcept
                        : message() {
  }

  virtual ~EchoService_call_args() noexcept;
  TraceContext req;
  std::string message;

  _EchoService_call_args__isset __isset;

  void __set_req(const TraceContext& val);

  void __set_message(const std::string& val);

  bool operator == (const EchoService_call_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const EchoService_call_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoService_call_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EchoService_call_pargs {
 public:


  virtual ~EchoService_call_pargs() noexcept;
  const TraceContext* req;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EchoService_call_result {
 public:

  EchoService_call_result(const EchoService_call_result&) noexcept;
  EchoService_call_result& operator=(const EchoService_call_result&) noexcept;
  EchoService_call_result() noexcept {
  }

  virtual ~EchoService_call_result() noexcept;

  bool operator == (const EchoService_call_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EchoService_call_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoService_call_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EchoService_call_presult {
 public:


  virtual ~EchoService_call_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EchoServiceClient : virtual public EchoServiceIf {
 public:
  EchoServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EchoServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void call(const TraceContext& req, const std::string& message) override;
  void send_call(const TraceContext& req, const std::string& message);
  void recv_call();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EchoServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<EchoServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (EchoServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_call(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EchoServiceProcessor(::std::shared_ptr<EchoServiceIf> iface) :
    iface_(iface) {
    processMap_["call"] = &EchoServiceProcessor::process_call;
  }

  virtual ~EchoServiceProcessor() {}
};

class EchoServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EchoServiceProcessorFactory(const ::std::shared_ptr< EchoServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< EchoServiceIfFactory > handlerFactory_;
};

class EchoServiceMultiface : virtual public EchoServiceIf {
 public:
  EchoServiceMultiface(std::vector<std::shared_ptr<EchoServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EchoServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<EchoServiceIf> > ifaces_;
  EchoServiceMultiface() {}
  void add(::std::shared_ptr<EchoServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void call(const TraceContext& req, const std::string& message) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->call(req, message);
    }
    ifaces_[i]->call(req, message);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EchoServiceConcurrentClient : virtual public EchoServiceIf {
 public:
  EchoServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  EchoServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void call(const TraceContext& req, const std::string& message) override;
  int32_t send_call(const TraceContext& req, const std::string& message);
  void recv_call(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
