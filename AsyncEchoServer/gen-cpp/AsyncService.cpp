/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AsyncService.h"

namespace AsyncService {


AsyncService_compute_result_args::~AsyncService_compute_result_args() noexcept {
}


uint32_t AsyncService_compute_result_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_1);
          this->__isset.num_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_2);
          this->__isset.num_2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AsyncService_compute_result_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AsyncService_compute_result_args");

  xfer += oprot->writeFieldBegin("num_1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->num_1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->num_2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AsyncService_compute_result_pargs::~AsyncService_compute_result_pargs() noexcept {
}


uint32_t AsyncService_compute_result_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AsyncService_compute_result_pargs");

  xfer += oprot->writeFieldBegin("num_1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->num_1)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->num_2)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void AsyncServiceClient::compute_result(const int64_t num_1, const int64_t num_2)
{
  send_compute_result(num_1, num_2);
}

void AsyncServiceClient::send_compute_result(const int64_t num_1, const int64_t num_2)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("compute_result", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  AsyncService_compute_result_pargs args;
  args.num_1 = &num_1;
  args.num_2 = &num_2;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool AsyncServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void AsyncServiceProcessor::process_compute_result(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("AsyncService.compute_result", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "AsyncService.compute_result");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "AsyncService.compute_result");
  }

  AsyncService_compute_result_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "AsyncService.compute_result", bytes);
  }

  try {
    iface_->compute_result(args.num_1, args.num_2);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "AsyncService.compute_result");
    }
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->asyncComplete(ctx, "AsyncService.compute_result");
  }

  return;
}

::std::shared_ptr< ::apache::thrift::TProcessor > AsyncServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< AsyncServiceIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< AsyncServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new AsyncServiceProcessor(handler));
  return processor;
}

void AsyncServiceConcurrentClient::compute_result(const int64_t num_1, const int64_t num_2)
{
  send_compute_result(num_1, num_2);
}

void AsyncServiceConcurrentClient::send_compute_result(const int64_t num_1, const int64_t num_2)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("compute_result", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  AsyncService_compute_result_pargs args;
  args.num_1 = &num_1;
  args.num_2 = &num_2;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

} // namespace

