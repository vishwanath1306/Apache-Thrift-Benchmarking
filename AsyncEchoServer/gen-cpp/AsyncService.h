/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AsyncService_H
#define AsyncService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "async_echo_types.h"

namespace AsyncService {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AsyncServiceIf {
 public:
  virtual ~AsyncServiceIf() {}
  virtual void compute_result(const int64_t num_1, const int64_t num_2) = 0;
};

class AsyncServiceIfFactory {
 public:
  typedef AsyncServiceIf Handler;

  virtual ~AsyncServiceIfFactory() {}

  virtual AsyncServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AsyncServiceIf* /* handler */) = 0;
  };

class AsyncServiceIfSingletonFactory : virtual public AsyncServiceIfFactory {
 public:
  AsyncServiceIfSingletonFactory(const ::std::shared_ptr<AsyncServiceIf>& iface) : iface_(iface) {}
  virtual ~AsyncServiceIfSingletonFactory() {}

  virtual AsyncServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(AsyncServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<AsyncServiceIf> iface_;
};

class AsyncServiceNull : virtual public AsyncServiceIf {
 public:
  virtual ~AsyncServiceNull() {}
  void compute_result(const int64_t /* num_1 */, const int64_t /* num_2 */) override {
    return;
  }
};

typedef struct _AsyncService_compute_result_args__isset {
  _AsyncService_compute_result_args__isset() : num_1(false), num_2(false) {}
  bool num_1 :1;
  bool num_2 :1;
} _AsyncService_compute_result_args__isset;

class AsyncService_compute_result_args {
 public:

  AsyncService_compute_result_args(const AsyncService_compute_result_args&) noexcept;
  AsyncService_compute_result_args& operator=(const AsyncService_compute_result_args&) noexcept;
  AsyncService_compute_result_args() noexcept
                                   : num_1(0),
                                     num_2(0) {
  }

  virtual ~AsyncService_compute_result_args() noexcept;
  int64_t num_1;
  int64_t num_2;

  _AsyncService_compute_result_args__isset __isset;

  void __set_num_1(const int64_t val);

  void __set_num_2(const int64_t val);

  bool operator == (const AsyncService_compute_result_args & rhs) const
  {
    if (!(num_1 == rhs.num_1))
      return false;
    if (!(num_2 == rhs.num_2))
      return false;
    return true;
  }
  bool operator != (const AsyncService_compute_result_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AsyncService_compute_result_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AsyncService_compute_result_pargs {
 public:


  virtual ~AsyncService_compute_result_pargs() noexcept;
  const int64_t* num_1;
  const int64_t* num_2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class AsyncServiceClient : virtual public AsyncServiceIf {
 public:
  AsyncServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AsyncServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void compute_result(const int64_t num_1, const int64_t num_2) override;
  void send_compute_result(const int64_t num_1, const int64_t num_2);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AsyncServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AsyncServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (AsyncServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_compute_result(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AsyncServiceProcessor(::std::shared_ptr<AsyncServiceIf> iface) :
    iface_(iface) {
    processMap_["compute_result"] = &AsyncServiceProcessor::process_compute_result;
  }

  virtual ~AsyncServiceProcessor() {}
};

class AsyncServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AsyncServiceProcessorFactory(const ::std::shared_ptr< AsyncServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< AsyncServiceIfFactory > handlerFactory_;
};

class AsyncServiceMultiface : virtual public AsyncServiceIf {
 public:
  AsyncServiceMultiface(std::vector<std::shared_ptr<AsyncServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AsyncServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<AsyncServiceIf> > ifaces_;
  AsyncServiceMultiface() {}
  void add(::std::shared_ptr<AsyncServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void compute_result(const int64_t num_1, const int64_t num_2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compute_result(num_1, num_2);
    }
    ifaces_[i]->compute_result(num_1, num_2);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AsyncServiceConcurrentClient : virtual public AsyncServiceIf {
 public:
  AsyncServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AsyncServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void compute_result(const int64_t num_1, const int64_t num_2) override;
  void send_compute_result(const int64_t num_1, const int64_t num_2);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
